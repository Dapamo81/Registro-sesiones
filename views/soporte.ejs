
<%- include ('partials/head') %>
    <%- include ('partials/header') %>
    <div class="container">
        <h2>Soporte</h2>
        <p>Conectado como: <%= user.username %> (<%= user.rol %>)</p>
        
        <% if (user.rol ==='admin') { %>
            <!-- Vista para ADMIN-->
            <div class="row">
                <div class="col-md-3 border-end">
                    <h5>Usuario</h5>
                    <ul id="lista-usuarios" class="list-group"></ul>
            </div>

            <div class="col-9 col-md-9">
                <div id="chat" class="border rounded p-3 mb-3" style="height: 600px; overflow-y: auto;"></div>

                <form id="formulario" class="row g-2 align-items-center">
                    <!-- Campo oculto para usuario actual -->
                    <input type="hidden" id="usuarioActual">

                    <!-- Campo de mensaje -->
                    <div class="col-12  text-md-start text-end">
                        <input type="text" id="mensaje" class="form-control" placeholder="Escribe tu mensaje..." required>
                        <!-- <label for="mensaje" class="form-label visually-hidden">Mensaje</label> -->
                    </div>

                    <!-- Botón enviar -->
                    <div class="col-12 text-md-start text-end">
                        <button type="submit" class="btn btn-primary w-100">Enviar</button>
                    </div>
                </form>

            </div>
            
        <% } else { %>
            <!-- Vista para Usuarios-->
            <div class="col-4 col-md-4">
                <div id="chat" class="border rounded p-3 mb-3" style="height: 600px; overflow-y: auto;"></div>
                       <form id="formulario" class="row g-2">
                           <div class="col-10 col-md-8">
                               <input type="text" id="mensaje" class="form-control" placeholder="Mensaje..." required>
                           </div>
                           <div class="col-2 col-md-4 text-md-start text-end">
                               <button type="submit" class="btn btn-primary w-100">Enviar</button>
                           </div>
                       </form>
               </div>
            </div>
        <% } %>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>

<script>
    const socket = io();
    const chat = document.getElementById("chat");
    const inputMensaje = document.getElementById("mensaje");
    const formulario = document.getElementById("formulario");

    // funcion para formatear la fecha
    function fomratearFecha(isoString) {
        const fecha = new Date(isoString);
        const dia = fecha.getDate().toString().padStart(2, '0');
        const mes = (fecha.getMonth() + 1).toString().padStart(2, '0'); // Los meses empiezan desde 0
        const anio = fecha.getFullYear();
        const horas = fecha.getHours().toString().padStart(2, '0');
        const minutos = fecha.getMinutes().toString().padStart(2, '0');
        return `${dia}/${mes}/${anio} ${horas}:${minutos}`;
    }   

    // funcion para agregar los mensajes

    function agregarMensaje(de, mensaje, fecha) {

        const p = document.createElement("p");
        const textFecha = fecha ? `<span class="text-muted" style="font-size: 0.8em;">${fomratearFecha(fecha)}</span>` : '';
        p.innerHTML = `<strong>${de}:</strong> ${mensaje} ${textFecha}`;
        chat.appendChild(p);
        chat.scrollTop = chat.scrollHeight; // Desplazar hacia abajo para mostrar el último
    }

    <% if (user.rol === 'admin') { %> // Logica para admin
        const listaUsuarios = document.getElementById("lista-usuarios");
            const usuarioActual = document.getElementById("usuarioActual");
            let conversaciones = {};
            let notificaciones = {};

            //cargar los mensajes de ese usuario
            function renderConversacion(usuario) {
                chat.innerHTML = ''; // Limpiar el chat
                const mensajes = conversaciones[usuario] || [];
                mensajes.forEach(({ de, mensaje, fecha }) =>   agregarMensaje( de, mensaje, fecha));

                usuarioActual.value = usuario; // Actualizar el campo oculto con el usuario actual

                //Actualizar estilos de listas
                document.querySelectorAll("#lista-usuarios li").forEach(li => {
                    li.classList.remove("bg-light", "text-danger", "text-success", "fw-bold");

                    //si fue visto antes, ponerlo verde
                    if (li.id === "user-" + usuario) {
                        li.classList.add("text-success", "fw-bold");
                        li.dataset.nuevo = "false"; // Marcar como no nuevo
                   
                    }
                });

            }

            //agregar un usuario a la lista

            function agregarUsuarioLista(usuario){
                if(!document.getElementById("user-" + usuario)){
                    const li = document.createElement("li");
                    li.className = "list-group-item";
                    li.textContent = usuario;
                    li.id = "user-" + usuario;
                    li.dataset.nuevo = "";
                    li.style.cursor = "pointer";
                    li.addEventListener("click", () => {
                        renderConversacion(usuario);
                    });
                    listaUsuarios.appendChild(li);
                }
            }

            //obtenemos el array de usuarios, los agrega a la lista lateral y carga su historial

            fetch("/api/usuarios-conversaciones")
                .then(res => res.json())
                .then(usuarios => {
                    usuarios.forEach(usuario => {
                        agregarUsuarioLista(usuario);
                        cargarHistorial(usuario);
                    });

                });

            //Cargar los mensajes de ese usuario 

            async function cargarHistorial(usuario) {
                const res = await fetch(`/api/mensajes?con=${usuario}`); //llama a la API para obtener mensajes
                const data = await res.json();
                conversaciones[usuario] = data.map(m => ({
                    de : m.de_usuario,
                    mensaje: m.mensaje,
                    fecha: m.fecha
                }));
                renderConversacion(usuario);
                agregarUsuarioLista(usuario);
            }

            // escuchador de eventos del socket

            socket.on("mensaje_recibido", ({ de, mensaje }) => {
                const fecha = new Date();
                conversaciones [de] = conversaciones [de] || [];
                conversaciones [de].push({de, mensaje, fecha});

                agregarUsuarioLista(de);

                // si no es la conversacion activa, notificacion visual en rojo 
                if (usuarioActual.value !== de){
                    const li= document.getElementById("user-" + de);
                    if(li && li.dataset.nuevo !== "true"){
                        li.classList.remove("text-success"); // quitar si lo tenia verde
                        li.classList.add("fw-bold", "text-danger");
                        li.dataset.nuevo = "true;"
                    }
                }else{
                    renderConversacion(de); // ya lo esta viendo lo marcamos como visto
                }
            });

        //escuchador de evento "mensaje_privado"
            formulario.addEventListener("submit", e => {
                e.preventDefault(); //cancela el envío del formulario (comportamiento predeterminado)
                const para = usuarioActual.value;
                const mensaje = inputMensaje.value.trim();
                if (!para || !mensaje) return;

                socket.emit("mensaje_privado", { para, mensaje });
                const fecha = new Date();
                conversaciones[para] = conversaciones[para] || [];
                conversaciones[para].push({ de: "<%= user.username %>", mensaje, fecha });
                renderConversacion(para);
                inputMensaje.value = '';
            });


    <% } else { %>
               // Vista para usuario
                fetch("/api/mensajes/mios")
                    .then(res => res.json())
                    .then(mensajes => {
                        if (!Array.isArray(mensajes)) {
                            console.error("Formato de mensajes no válido:", mensajes);
                            return;
                        }

                        console.log("Mensajes recibidos:", mensajes);
                        chat.innerHTML = "";
                        mensajes.forEach(m => agregarMensaje(m.de_usuario, m.mensaje, m.fecha));
                    });

                //escuchador de evento "mensaje_recibido"
                socket.on("mensaje_recibido", ({ de, mensaje }) => {
                    const fecha = new Date();
                    agregarMensaje(de, mensaje, fecha);
                });

                //escuchador de evento "mensaje_privado"
                formulario.addEventListener("submit", e => {
                    e.preventDefault();
                    const mensaje = inputMensaje.value.trim();
                    if (!mensaje) return;
                    socket.emit("mensaje_privado", { para: "admin", mensaje });
                    agregarMensaje("Tú", mensaje, new Date());
                    inputMensaje.value = '';
                });

        <% } %>
</script>

            <%- include ('partials/footer') %>